<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- <bean id="tv" class="polymorphism.SamsungTVImpl" init-method="initMethod" destroy-method="destroyMethod" /> -->

	<!-- <bean id="tv" class="polymorphism.ex.SamsungTVImpl" scope = "singleton" />-->
	
	<!-- <bean id="tv" class="polymorphism.DI.SamsungTV" >
		<constructor-arg ref="sony"></constructor-arg>
	</bean> -->

	<bean id="tv" class="polymorphism.DIchange.SamsungTV" >
		<constructor-arg ref="apple"></constructor-arg>
		<constructor-arg value="270000"></constructor-arg>
	</bean>
	
	<bean id="sony" class="polymorphism.DIchange.SonySpeaker"></bean>

	<bean id="apple" class="polymorphism.DIchange.AppleSpeaker"></bean>
	
	<!--init-method 속성으로 지정한 메소드는 컨테이너가 구동되어 객체가 생성된 직후에 호출
	컨테이너가 종료되기 직전에 자신이 관리하는 모든 객체를 삭제하는데, 이때 destroy-method 속성으로 지정한 메소드가 객체가 삭제되기 직전에 호출된다. -->
	<!-- 스프링 컨테이너가 관리하는 <bean>들은 대부분 싱글톤으로 운영되어야하기 때문에 scope값을 "singleton"으로 설정하거나 아예 생략하는 것이 일반적.
	필요한 경우 scope값을 "prototype"으로 지정할수 있는데, 이렇게 지정하면 스프링컨테이너는 해당 <bean>이 요청될 때마다 매번 새로운 객체를 반환한다. -->
</beans>
